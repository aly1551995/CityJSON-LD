@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix cj: <https://www.cityjson.org/ont/cityjson.ttl#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix geosparql: <http://www.opengis.net/ont/geosparql#> .

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix cj: <https://www.cityjson.org/ont/cityjson.ttl#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix geosparql: <http://www.opengis.net/ont/geosparql#> .

#################################################################
#    Cityjson Shape
#################################################################

cj:CityjsonShape
    a sh:NodeShape ;
    sh:targetClass cj:Cityjson;
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:Cityjson
    ] ;
    sh:property [
        sh:path cj:type ;
        sh:datatype xsd:string ;
        sh:in ("CityJSON") ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Only one type should exist and the value must be \"CityJSON\"" ;
    ] ;
    sh:property [
        sh:path cj:version ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "^\\d\\.\\d$" ;
        sh:message "Only one Version should exist and it must be in the format X.Y." ;
    ] ;
    sh:property [
        sh:path cj:hasTransform ;
        sh:node cj:TransformShape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:hasCityObjects ;
        sh:or (
            [ sh:node cj:FirstLevelCityObjectShape ; ]
            [ sh:node cj:SecondLevelCityObjectShape ; ]
        ) ;
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path cj:hasVertices ;
        sh:node cj:VerticesShape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:hasMetadata ;
        sh:node cj:MetadataShape ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] . 

#################################################################
#    Transform Shape
#################################################################

cj:TransformShape
    a sh:NodeShape ;
    sh:targetClass cj:Transform;
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:Transform
    ] ;
    sh:property [
        sh:path cj:hasScale ;
        sh:node cj:ScaleShape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:hasTranslate ;
        sh:node cj:TranslateShape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .

#################################################################
#    Scale Shape
#################################################################

cj:ScaleShape
    a sh:NodeShape ;
    sh:targetClass cj:Scale;
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:Scale ;
    ] ;
    sh:property [
        sh:path cj:scaleX ;
        sh:datatype xsd:float ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:scaleY ;
        sh:datatype xsd:float ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:scaleZ ;
        sh:datatype xsd:float ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .

#################################################################
#    Translate Shape
#################################################################

cj:TranslateShape
    a sh:NodeShape ;
    sh:targetClass cj:Translate;
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:Translate ;
    ] ;
    sh:property [
        sh:path cj:translateX ;
        sh:datatype xsd:float ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:translateY ;
        sh:datatype xsd:float ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:translateZ ;
        sh:datatype xsd:float ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .

#################################################################
#    Vertices Shape
#################################################################

cj:VerticesShape 
  a sh:NodeShape ;
    sh:targetClass cj:Vertices ; 
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        # sh:hasValue cj:Vertices
    ] ;
    sh:property [ 
        sh:path rdf:first ;
        sh:node cj:VertexShape ;
    ],
    [
        sh:path rdf:rest ;
        sh:or ([sh:class cj:VerticesShape ;] 
               [ sh:node rdf:nil ;] ) ;
    ] .

#################################################################
#    Vertex Shape
#################################################################

cj:VertexShape
  a sh:NodeShape ;
  sh:targetClass cj:Vertex ;
  sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:Vertex
    ] ;
  sh:property [
        sh:path cj:vertexX ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
  sh:property [
        sh:path cj:vertexY ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
  sh:property [
        sh:path cj:vertexZ ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .

#################################################################
#    PointOfContact Shape
#################################################################

cj:PointOfContactShape
    a sh:NodeShape ;
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:PointOfContact;
    ] ;
    sh:targetClass cj:PointOfContact ;
    sh:property [
        sh:path cj:contactName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:emailAddress ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:role ;
        sh:datatype xsd:string ;
        sh:in (
                "resourceProvider"
                "custodian"
                "owner"
                "user"
                "distributor"
                "originator"
                "pointOfContact"
                "principalInvestigator"
                "processor"
                "publisher"
                "author"
                "sponsor"
                "co-author"
                "collaborator"
                "editor"
                "mediator"
                "rightsHolder"
                "contributor"
                "funder"
                "stakeholder"
            ) ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] ; 
    sh:property [
        sh:path cj:website ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:contactType ;
        sh:datatype xsd:string ;
        sh:in (
                "individual"
                "organization"
            ) ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] ; 
    sh:property [
            sh:path cj:hasAddress ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
    ] ; 
    sh:property [
        sh:path cj:phone ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:organization ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] .

#################################################################
#    FirstSecondLevelCityObject Shape
#################################################################

cj:FirstLevelCityObjectShape
    a sh:NodeShape ;
    sh:targetClass cj:FirstLevelCityObject ;
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:FirstLevelCityObject
    ] ;
     sh:property [
        sh:path cj:type ;
        sh:in (
                "Bridge"
                "Building"
                "CityFurniture"
                "CityObjectGroup"
                "GenericCityObject"
                "LandUse"
                "Metadata"
                "OtherConstruction"
                "PlantCover"
                "Railway"
                "Road"
                "SolitaryVegetationObject"
                "TINRelief"
                "TransportationSquare"
                "Tunnel"
                "Waterbody"
                "Waterway"
            ) ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:hasAttribute ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] ; 
    sh:property [
        sh:path cj:hasGeographicalExtent ;
        sh:node cj:GeographicalExtent ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] ; 
    sh:property [
        sh:path cj:hasChildren ;
        sh:node cj:SecondLevelCityObject ;
        sh:minCount 0 ;
    ] ;

    sh:property [
    sh:path cj:hasGeometry ;
    sh:node cj:GeometryShape ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    ] .

#################################################################
#    SecondLevelCityObject Shape
#################################################################

cj:SecondLevelCityObjectShape
    a sh:NodeShape ;
    sh:targetClass cj:SecondLevelCityObject ;
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:SecondLevelCityObject
    ] ;
    sh:property [
        sh:path cj:type ;
        sh:in (
                "BridgeConstructiveElement"
                "BridgeFurniture"
                "BridgePart"
                "BridgeRoom"
                "BridgeInstallation"
                "BuildingConstructiveElement"
                "BuildingFurniture"
                "BuildingInstallation"
                "BuildingPart"
                "BuildingRoom"
                "BuildingStorey"
                "BuildingUnit"
                "TunnelConstructiveElement"
                "TunnelFurniture"
                "TunnelHollowSpace"
                "TunnelInstallation"
                "TunnelPart"
            ) ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:hasAttribute ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] ; 
    sh:property [
        sh:path cj:hasGeographicalExtent ;
        sh:node cj:GeographicalExtent ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
    ] ; 
    sh:property [
        sh:path cj:hasChildren ;
        sh:node cj:SecondLevelCityObjectShape ;
        sh:minCount 0 ;
    ];
    sh:property [
        sh:path cj:hasParent ;
        sh:or (
            [ sh:node cj:FirstLevelCityObjectShape ]
            [ sh:node cj:SecondLevelCityObjectShape ]
        ) ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:hasGeometry ;
        sh:node cj:GeometryShape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .

#################################################################
#    Geometry Shape
#################################################################

cj:GeometryShape 
  a sh:NodeShape ;
    sh:targetClass cj:Geometry ; 
    sh:closed true ;
    sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:Geometry ;
    ] ;
    sh:property [
        sh:path cj:type ;
        sh:in (
                "MultiPoint"
                "MultiLineString"
                "MultiSurface"
                "CompositeSurface"
                "Solid"
                "MultiSolid"
                "CompositeSolid"
                "GeometryInstance"
            ) ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:lod ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cj:hasBoundingBox ;
        sh:property [
            sh:path rdf:type ;
            sh:in (
                cj:MultiPoint
                cj:MultiLineString
                cj:MultiSurface
                cj:CompositeSurface
                cj:Solid
                cj:MultiSolid
                cj:CompositeSolid
            ) ;
            sh:minCount 1 ;
        ] ;
        sh:or (
            [ sh:node cj:MultiPointShape ; ]
            [ sh:node cj:MultiLineStringShape ; ]
            [ sh:node cj:MultiSurfaceShape ; ]
            [ sh:node cj:SolidShape ; ]
            [ sh:node cj:MultiSolidShape ; ]
        ) ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path geosparql:asWKT ;
        sh:datatype geosparql:wktLiteral ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .

#################################################################
#    MultiPoint Shape
#################################################################

cj:MultiPointShape
  a sh:NodeShape ;
  sh:targetClass cj:MultiPoint ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
    sh:hasValue cj:MultiPoint ;
  ] ;
  sh:property [
    sh:path cj:hasPoint  ;
    sh:node cj:PointShape ;
    sh:minCount 1 ; 
  ] .

#################################################################
#    Point Shape
#################################################################

cj:PointShape
  a sh:NodeShape ;
  sh:targetClass cj:Point ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
    sh:hasValue cj:Point ;
  ] ;
  sh:property [
    sh:path cj:boundaryX ;
    sh:datatype xsd:float ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path cj:boundaryY ;
    sh:datatype xsd:float ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path cj:boundaryZ ;
    sh:datatype xsd:float ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] .

#################################################################
#    MultiLineString Shape
#################################################################

cj:MultiLineStringShape
  a sh:NodeShape ;
  sh:targetClass cj:MultiLineString ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
    sh:hasValue cj:MultiLineString ;
  ] ;
  sh:property [
    sh:path cj:hasLineString ;
    sh:node cj:LineStringShape ;
    sh:minCount 1 ; 
  ] .

#################################################################
#    LineString Shape
#################################################################

cj:LineStringShape
    a sh:NodeShape ;
      sh:targetClass cj:LineString ; 
      sh:closed true ;
      sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:LineString ;
      ] ;
      sh:property [
        sh:path cj:hasPoint  ;
        sh:node cj:PointShape ;
        sh:minCount 1 ; 
      ] .

#################################################################
#    MultiSurface Shape
#################################################################

cj:MultiSurfaceShape
  a sh:NodeShape ;
  sh:targetClass cj:MultiSurface ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
     sh:or (
            [ sh:hasValue cj:MultiSurface  ; ]
            [ sh:hasValue cj:CompositeSurface  ; ]
        ) ;
  ] ;
  sh:property [
    sh:path cj:hasSurface  ;
    sh:node cj:SurfaceShape ;
    sh:minCount 1 ; 
  ] .


#################################################################
#    Surface Shape
#################################################################

cj:SurfaceShape
    a sh:NodeShape ;
      sh:targetClass cj:Surface ; 
      sh:closed true ;
      sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:Surface ;
      ] ;
      sh:property [
        sh:path cj:hasExteriorBoundary ;
        sh:node cj:ExteriorBoundaryShape ;
        sh:minCount 1 ; 
      ] ;
       sh:property [
        sh:path cj:hasInteriorBoundary ;
        sh:node cj:InteriorBoundaryShape ;
        sh:minCount 0 ; 
      ] .


#################################################################
#    ExteriorBoundary Shape
#################################################################

cj:ExteriorBoundaryShape
  a sh:NodeShape ;
  sh:targetClass cj:ExteriorBoundary ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
    sh:hasValue cj:ExteriorBoundary ;
  ] ;
  sh:property [
    sh:path cj:hasLineString ;
    sh:class cj:LineString;
    sh:minCount 1 ; 
  ] .

#################################################################
#    InteriorBoundary Shape
#################################################################

cj:InteriorBoundaryShape
  a sh:NodeShape ;
  sh:targetClass cj:InteriorBoundary ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
    sh:hasValue cj:InteriorBoundary ;
  ] ;
  sh:property [
    sh:path cj:hasLineString ;
    sh:class cj:LineString;
    sh:minCount 0 ; 
  ] .

#################################################################
#    Solid Shape
#################################################################

cj:SolidShape
    a sh:NodeShape ;
      sh:targetClass cj:Solid ; 
      sh:closed true ;
      sh:property [
        sh:path rdf:type ;
        sh:hasValue cj:Solid ;
      ] ;
      sh:property [
        sh:path cj:hasExteriorShell ;
        sh:node cj:ExteriorShellShape ;
        sh:minCount 1 ; 
      ] ;
       sh:property [
        sh:path cj:hasInteriorShell ;
        sh:node cj:InteriorShellShape ;
        sh:minCount 0 ; 
      ] .

#################################################################
#    ExteriorShell Shape
#################################################################

cj:ExteriorShellShape
  a sh:NodeShape ;
  sh:targetClass cj:ExteriorShell ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
    sh:hasValue cj:ExteriorShell ;
  ] ;
  sh:property [
    sh:path cj:hasSurface ;
    sh:class cj:Surface;
    sh:minCount 1 ; 
  ] .

#################################################################
#    InteriorShell Shape
#################################################################

cj:InteriorShellShape
  a sh:NodeShape ;
  sh:targetClass cj:InteriorShell ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
    sh:hasValue cj:InteriorShell ;
  ] ;
  sh:property [
    sh:path cj:hasSurface ;
    sh:class cj:Surface;
    sh:minCount 0 ; 
  ] .

#################################################################
#    MultiSolid Shape
#################################################################

cj:MultiSolidShape
  a sh:NodeShape ;
  sh:targetClass cj:MultiSolid ; 
  sh:closed true ;
  sh:property [
    sh:path rdf:type ;
     sh:or (
            [ sh:hasValue cj:MultiSolid ; ]
            [ sh:hasValue cj:CompositeSolid ; ]
        ) ;
  ] ;
  sh:property [
    sh:path cj:hasSolid  ;
    sh:node cj:SolidShape ;
    sh:minCount 1 ; 
  ] .
